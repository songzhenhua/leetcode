# coding=utf-8
"""
问题：
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:
给定数组 nums = [1,1,2],
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。

示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。

说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);
// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
"""


def remove_duplicates(nums):
    """
    方法：双指针法。i为去重后的指针，当nums[i] = nums[j]时跳过，
    当nums[i] != nums[j]时，i向后移，并把不重复的j位置的数据给i，则最后数据前半段即是去重后的数据

    1.根据问题描述，我们不用关心数据后半段冗余的数据
    2.题目给定的是排序后的数组
    3.题目要求空间复杂度为O(1)，即必须在原有数组上做文章

    时间复杂度：O(n)，假设数组的长度是 n，那么 i 和 j 分别最多遍历 n 步。
    空间复杂度：O(1)。

    :param nums: 给定已排序数据
    :return: 去重后数据长度
    """
    i = 0
    for j in range(1, len(nums)):
        if nums[i] != nums[j]:
            i += 1
            nums[i] = nums[j]
    return i + 1


if __name__ == "__main__":
    a = [1, 1, 2]
    length = remove_duplicates(a)
    print a[:length]  # 最后只要打印数组返回的长度，即是去重后的数据
